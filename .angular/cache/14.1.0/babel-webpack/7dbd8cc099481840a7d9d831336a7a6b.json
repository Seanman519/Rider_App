{"ast":null,"code":"import _asyncToGenerator from \"/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Client } from '@googlemaps/google-maps-services-js';\nimport { environment } from 'src/environments/environment';\nimport { OverlayService } from './overlay.service';\nlet GeocodeService = class GeocodeService {\n  constructor(client, overlay) {\n    this.client = client;\n    this.overlay = overlay;\n    this.service = new google.maps.DistanceMatrixService();\n    this.directions = new google.maps.DirectionsService();\n  } //convert the lat and lng numbers to an actual address\n\n\n  getAddress(lat, lng) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const address = yield _this.client.reverseGeocode({\n          params: {\n            latlng: {\n              lat: lat,\n              lng: lng\n            },\n            key: environment.apiKey\n          },\n          timeout: 5000 // milliseconds\n\n        });\n        console.log(address);\n        return address;\n      } catch (e) {\n        _this.overlay.showAlert('GeoError', e);\n      }\n    })();\n  } //convert the address to lat and lng\n\n\n  getLatLng(addressi) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const latlng = yield _this2.client.geocode({\n          params: {\n            address: addressi,\n            key: environment.apiKey\n          },\n          timeout: 5000 // milliseconds\n\n        });\n        return latlng;\n      } catch (e) {\n        _this2.overlay.showAlert('GeoError', e);\n\n        console.log(e);\n      }\n    })();\n  } //Get the distance between the origin and destination\n\n\n  getDirections(from, to) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {} catch (e) {\n        _this3.overlay.showAlert('GeoError', e);\n\n        console.log(e);\n      }\n    })();\n  }\n\n};\n\nGeocodeService.ctorParameters = () => [{\n  type: Client\n}, {\n  type: OverlayService\n}];\n\nGeocodeService = __decorate([Injectable({\n  providedIn: 'root'\n})], GeocodeService);\nexport { GeocodeService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,MAAT,QAAuB,qCAAvB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,cAAT,QAA+B,mBAA/B;IAMaC,cAAc,SAAdA,cAAc;EAIzBC,YAAoBC,MAApB,EAA4CC,OAA5C,EAAmE;IAA/C;IAAwB;IAH5C,eAAU,IAAIC,MAAM,CAACC,IAAP,CAAYC,qBAAhB,EAAV;IACA,kBAAa,IAAIF,MAAM,CAACC,IAAP,CAAYE,iBAAhB,EAAb;EAEwE,CAJ/C,CAMzB;;;EACMC,UAAU,CAACC,GAAD,EAAcC,GAAd,EAAyB;IAAA;;IAAA;MACvC,IAAG;QACJ,MAAMC,OAAO,SAAS,KAAI,CAACT,MAAL,CACnBU,cADmB,CACJ;UAChBC,MAAM,EAAE;YACNC,MAAM,EAAE;cAAEL,GAAG,EAAEA,GAAP;cAAYC,GAAG,EAAEA;YAAjB,CADF;YAENK,GAAG,EAAEjB,WAAW,CAACkB;UAFX,CADQ;UAKhBC,OAAO,EAAE,IALO,CAKD;;QALC,CADI,CAAtB;QAQAC,OAAO,CAACC,GAAR,CAAYR,OAAZ;QACA,OAAOA,OAAP;MACE,CAXD,CAWC,OAAMS,CAAN,EAAQ;QACP,KAAI,CAACjB,OAAL,CAAakB,SAAb,CAAuB,UAAvB,EAAmCD,CAAnC;MACD;IAdsC;EAexC,CAtBwB,CAwBvB;;;EACIE,SAAS,CAACC,QAAD,EAAS;IAAA;;IAAA;MACtB,IAAG;QACJ,MAAMT,MAAM,SAAS,MAAI,CAACZ,MAAL,CAAYsB,OAAZ,CAAoB;UACvCX,MAAM,EAAE;YACNF,OAAO,EAAEY,QADH;YAENR,GAAG,EAAEjB,WAAW,CAACkB;UAFX,CAD+B;UAKvCC,OAAO,EAAE,IAL8B,CAKxB;;QALwB,CAApB,CAArB;QAOD,OAAOH,MAAP;MACG,CATD,CASC,OAAMM,CAAN,EAAQ;QACP,MAAI,CAACjB,OAAL,CAAakB,SAAb,CAAuB,UAAvB,EAAmCD,CAAnC;;QACAF,OAAO,CAACC,GAAR,CAAYC,CAAZ;MACD;IAbqB;EAcvB,CAvCwB,CA2CzB;;;EACMK,aAAa,CAACC,IAAD,EAAOC,EAAP,EAAS;IAAA;;IAAA;MAC1B,IAAG,CAEF,CAFD,CAEC,OAAMP,CAAN,EAAQ;QACP,MAAI,CAACjB,OAAL,CAAakB,SAAb,CAAuB,UAAvB,EAAmCD,CAAnC;;QACAF,OAAO,CAACC,GAAR,CAAYC,CAAZ;MACD;IANyB;EAO3B;;AAnDwB;;;QARlBvB;;QAEAE;;;AAMIC,cAAc,eAH1BJ,UAAU,CAAC;EACVgC,UAAU,EAAE;AADF,CAAD,CAGgB,GAAd5B,cAAc,CAAd;SAAAA","names":["Injectable","Client","environment","OverlayService","GeocodeService","constructor","client","overlay","google","maps","DistanceMatrixService","DirectionsService","getAddress","lat","lng","address","reverseGeocode","params","latlng","key","apiKey","timeout","console","log","e","showAlert","getLatLng","addressi","geocode","getDirections","from","to","providedIn"],"sourceRoot":"","sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/src/app/services/geocode.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Client } from '@googlemaps/google-maps-services-js';\nimport { environment } from 'src/environments/environment';\nimport { OverlayService } from './overlay.service';\ndeclare let google;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeocodeService {\n  service = new google.maps.DistanceMatrixService();\n  directions = new google.maps.DirectionsService();\n\n  constructor(private client: Client, private overlay: OverlayService) { }\n\n  //convert the lat and lng numbers to an actual address\n  async getAddress(lat: number, lng: number){\n    try{\n   const address = await this.client\n     .reverseGeocode({\n     params: {\n       latlng: { lat: lat, lng: lng },\n       key: environment.apiKey,\n     },\n     timeout: 5000, // milliseconds\n   })\n   console.log(address);\n   return address\n    }catch(e){\n      this.overlay.showAlert('GeoError', e);\n    }\n  }\n\n    //convert the address to lat and lng\n  async getLatLng(addressi){\n    try{\n   const latlng = await this.client.geocode({\n     params: {\n       address: addressi,\n       key: environment.apiKey,\n     },\n     timeout: 5000, // milliseconds\n   })\n  return latlng\n    }catch(e){\n      this.overlay.showAlert('GeoError', e);\n      console.log(e);\n    }\n  }\n\n\n\n  //Get the distance between the origin and destination\n  async getDirections(from, to){\n    try{\n    \n    }catch(e){\n      this.overlay.showAlert('GeoError', e)\n      console.log(e)\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}