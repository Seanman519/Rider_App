{"ast":null,"code":"import _asyncToGenerator from \"/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AlertController, LoadingController, ToastController } from '@ionic/angular';\nlet OverlayService = class OverlayService {\n  constructor(loadingCtrl, toast, alertController) {\n    this.loadingCtrl = loadingCtrl;\n    this.toast = toast;\n    this.alertController = alertController;\n  }\n\n  showLoader(msg) {\n    if (!this.isLoading) this.isLoading = true;\n    return this.loadingCtrl.create({\n      message: msg,\n      spinner: 'lines-sharp',\n      cssClass: 'default-alert'\n    }).then(res => {\n      res.present().then(() => {\n        if (!this.isLoading) {\n          res.dismiss().then(() => {\n            console.log('abort presenting');\n          });\n        }\n      });\n    }).catch(e => {\n      this.isLoading = false;\n      console.log(e);\n    });\n  }\n\n  hideLoader() {\n    if (this.isLoading) this.isLoading = false;\n    return this.loadingCtrl.dismiss().then(() => console.log('dismissed')).catch(e => console.log(e));\n  }\n\n  showToast(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const alert = yield _this.toast.create({\n        message: message,\n        position: 'top',\n        duration: 500,\n        cssClass: 'default-alert'\n      });\n      yield alert.present();\n    })();\n  }\n\n  showAlert(header, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const alert = yield _this2.alertController.create({\n        header,\n        message,\n        cssClass: 'default-alert',\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n\n};\n\nOverlayService.ctorParameters = () => [{\n  type: LoadingController\n}, {\n  type: ToastController\n}, {\n  type: AlertController\n}];\n\nOverlayService = __decorate([Injectable({\n  providedIn: 'root'\n})], OverlayService);\nexport { OverlayService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,eAA7C,QAAoE,gBAApE;IAKaC,cAAc,SAAdA,cAAc;EAGzBC,YAAoBC,WAApB,EAA2DC,KAA3D,EAA4FC,eAA5F,EAA4H;IAAxG;IAAuC;IAAiC;EAAqC;;EAGjIC,UAAU,CAACC,GAAD,EAAI;IACZ,IAAG,CAAC,KAAKC,SAAT,EAAoB,KAAKA,SAAL,GAAiB,IAAjB;IACpB,OAAO,KAAKL,WAAL,CAAiBM,MAAjB,CAAwB;MAC7BC,OAAO,EAAEH,GADoB;MAE7BI,OAAO,EAAE,aAFoB;MAG7BC,QAAQ,EAAE;IAHmB,CAAxB,EAIJC,IAJI,CAICC,GAAG,IAAG;MACZA,GAAG,CAACC,OAAJ,GAAcF,IAAd,CAAmB,MAAK;QACtB,IAAG,CAAC,KAAKL,SAAT,EAAoB;UAClBM,GAAG,CAACE,OAAJ,GAAcH,IAAd,CAAmB,MAAK;YACtBI,OAAO,CAACC,GAAR,CAAY,kBAAZ;UACD,CAFD;QAGD;MACF,CAND;IAOD,CAZM,EAaNC,KAbM,CAaAC,CAAC,IAAG;MACT,KAAKZ,SAAL,GAAiB,KAAjB;MACAS,OAAO,CAACC,GAAR,CAAYE,CAAZ;IACD,CAhBM,CAAP;EAiBD;;EAEDC,UAAU;IACR,IAAG,KAAKb,SAAR,EAAmB,KAAKA,SAAL,GAAiB,KAAjB;IACnB,OAAO,KAAKL,WAAL,CAAiBa,OAAjB,GACNH,IADM,CACD,MAAMI,OAAO,CAACC,GAAR,CAAY,WAAZ,CADL,EAENC,KAFM,CAEAC,CAAC,IAAIH,OAAO,CAACC,GAAR,CAAYE,CAAZ,CAFL,CAAP;EAGD;;EAEKE,SAAS,CAACZ,OAAD,EAAQ;IAAA;;IAAA;MACrB,MAAMa,KAAK,SAAS,KAAI,CAACnB,KAAL,CAAWK,MAAX,CAAkB;QACpCC,OAAO,EAAEA,OAD2B;QAEpCc,QAAQ,EAAE,KAF0B;QAGpCC,QAAQ,EAAE,GAH0B;QAIpCb,QAAQ,EAAE;MAJ0B,CAAlB,CAApB;MAOA,MAAMW,KAAK,CAACR,OAAN,EAAN;IARqB;EAStB;;EAEKW,SAAS,CAACC,MAAD,EAASjB,OAAT,EAAgB;IAAA;;IAAA;MAC7B,MAAMa,KAAK,SAAS,MAAI,CAAClB,eAAL,CAAqBI,MAArB,CAA4B;QAC9CkB,MAD8C;QAE9CjB,OAF8C;QAG9CE,QAAQ,EAAE,eAHoC;QAI9CgB,OAAO,EAAE,CAAC,IAAD;MAJqC,CAA5B,CAApB;MAMA,MAAML,KAAK,CAACR,OAAN,EAAN;IAP6B;EAQ9B;;AArDwB;;;QALDhB;;QAAmBC;;QAApCF;;;AAKIG,cAAc,eAH1BJ,UAAU,CAAC;EACVgC,UAAU,EAAE;AADF,CAAD,CAGgB,GAAd5B,cAAc,CAAd;SAAAA","names":["Injectable","AlertController","LoadingController","ToastController","OverlayService","constructor","loadingCtrl","toast","alertController","showLoader","msg","isLoading","create","message","spinner","cssClass","then","res","present","dismiss","console","log","catch","e","hideLoader","showToast","alert","position","duration","showAlert","header","buttons","providedIn"],"sourceRoot":"","sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/src/app/services/overlay.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AlertController, LoadingController, ToastController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayService {\n  isLoading: any;\n\n  constructor(private loadingCtrl: LoadingController,private toast: ToastController,  private alertController: AlertController) { }\n\n\n  showLoader(msg) {\n    if(!this.isLoading) this.isLoading = true;\n    return this.loadingCtrl.create({\n      message: msg,\n      spinner: 'lines-sharp',\n      cssClass: 'default-alert'\n    }).then(res => {\n      res.present().then(() => {\n        if(!this.isLoading) {\n          res.dismiss().then(() => {\n            console.log('abort presenting');\n          });\n        }\n      })\n    })\n    .catch(e => {\n      this.isLoading = false;\n      console.log(e);\n    })\n  }\n\n  hideLoader() {\n    if(this.isLoading) this.isLoading = false;\n    return this.loadingCtrl.dismiss()\n    .then(() => console.log('dismissed'))\n    .catch(e => console.log(e));\n  }\n\n  async showToast(message) {\n    const alert = await this.toast.create({\n      message: message,\n      position: 'top',\n      duration: 500,\n      cssClass: 'default-alert'\n      \n    });\n    await alert.present();\n  }\n\n  async showAlert(header, message) {\n    const alert = await this.alertController.create({\n      header,\n      message,\n      cssClass: 'default-alert',\n      buttons: ['OK'],\n    });\n    await alert.present();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}