{"ast":null,"code":"import _asyncToGenerator from \"/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Auth, signOut, signInWithPhoneNumber, RecaptchaVerifier, signInWithCredential } from '@angular/fire/auth';\nlet AuthService = class AuthService {\n  constructor(auth) {\n    this.auth = auth;\n  }\n\n  recaptcha() {\n    this.appVerifier = new RecaptchaVerifier('sign-in-button', {\n      size: 'invisible',\n      callback: response => {\n        console.log(response);\n      },\n      'expired-callback': () => {}\n    }, this.auth);\n  }\n\n  signInWithPhoneNumber(phoneNumber) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (!_this.appVerifier) _this.recaptcha();\n        const confirmationResult = yield signInWithPhoneNumber(_this.auth, phoneNumber, _this.appVerifier);\n        _this.confirmationResult = confirmationResult;\n        return confirmationResult;\n      } catch (e) {\n        throw e;\n      }\n    })();\n  }\n\n  signInWithGoogle({\n    token\n  }) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const sToken = yield signInWithCredential(_this2.auth, token);\n        console.log(\"its done\", sToken);\n      } catch (e) {\n        throw e;\n      }\n    })();\n  }\n\n  verifyOtp(otp) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (!_this3.appVerifier) _this3.recaptcha();\n        const result = yield _this3.confirmationResult.confirm(otp);\n        console.log(result);\n        const user = result?.user;\n        console.log(user);\n      } catch (e) {\n        throw e?.message;\n      }\n    })();\n  }\n\n  logout() {\n    return signOut(this.auth);\n  }\n\n};\n\nAuthService.ctorParameters = () => [{\n  type: Auth\n}];\n\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SACEC,IADF,EAEEC,OAFF,EAGEC,qBAHF,EAIEC,iBAJF,EAOEC,oBAPF,QAQO,oBARP;IAaaC,WAAW,SAAXA,WAAW;EAGtBC,YAAoBC,IAApB,EAA8B;IAAV;EAEnB;;EAEDC,SAAS;IACP,KAAKC,WAAL,GAAmB,IAAIN,iBAAJ,CAAsB,gBAAtB,EAAwC;MACzDO,IAAI,EAAE,WADmD;MAEzDC,QAAQ,EAAGC,QAAD,IAAa;QACrBC,OAAO,CAACC,GAAR,CAAYF,QAAZ;MACD,CAJwD;MAKzD,oBAAoB,MAAK,CAAG;IAL6B,CAAxC,EAMhB,KAAKL,IANW,CAAnB;EAOD;;EAEKL,qBAAqB,CAACa,WAAD,EAAY;IAAA;;IAAA;MACrC,IAAI;QACF,IAAG,CAAC,KAAI,CAACN,WAAT,EAAsB,KAAI,CAACD,SAAL;QACtB,MAAMQ,kBAAkB,SAASd,qBAAqB,CAAC,KAAI,CAACK,IAAN,EAAYQ,WAAZ,EAAyB,KAAI,CAACN,WAA9B,CAAtD;QACA,KAAI,CAACO,kBAAL,GAA0BA,kBAA1B;QACA,OAAOA,kBAAP;MACD,CALD,CAKE,OAAMC,CAAN,EAAS;QACT,MAAMA,CAAN;MACD;IARoC;EAStC;;EAGKC,gBAAgB,CAAC;IAACC;EAAD,CAAD,EAAQ;IAAA;;IAAA;MAC5B,IAAI;QACF,MAAMC,MAAM,SAAShB,oBAAoB,CAAC,MAAI,CAACG,IAAN,EAAYY,KAAZ,CAAzC;QACAN,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBM,MAAxB;MACD,CAHD,CAGE,OAAMH,CAAN,EAAS;QACT,MAAMA,CAAN;MACD;IAN2B;EAO7B;;EAEKI,SAAS,CAACC,GAAD,EAAI;IAAA;;IAAA;MACjB,IAAI;QACF,IAAG,CAAC,MAAI,CAACb,WAAT,EAAsB,MAAI,CAACD,SAAL;QACtB,MAAMe,MAAM,SAAS,MAAI,CAACP,kBAAL,CAAwBQ,OAAxB,CAAgCF,GAAhC,CAArB;QACAT,OAAO,CAACC,GAAR,CAAYS,MAAZ;QACA,MAAME,IAAI,GAAGF,MAAM,EAAEE,IAArB;QACAZ,OAAO,CAACC,GAAR,CAAYW,IAAZ;MACD,CAND,CAME,OAAMR,CAAN,EAAS;QACT,MAAMA,CAAC,EAAES,OAAT;MACD;IATgB;EAUlB;;EAEDC,MAAM;IACJ,OAAO1B,OAAO,CAAC,KAAKM,IAAN,CAAd;EACD;;AApDqB;;;QAZtBP;;;AAYWK,WAAW,eAHvBN,UAAU,CAAC;EACV6B,UAAU,EAAE;AADF,CAAD,CAGa,GAAXvB,WAAW,CAAX;SAAAA","names":["Injectable","Auth","signOut","signInWithPhoneNumber","RecaptchaVerifier","signInWithCredential","AuthService","constructor","auth","recaptcha","appVerifier","size","callback","response","console","log","phoneNumber","confirmationResult","e","signInWithGoogle","token","sToken","verifyOtp","otp","result","confirm","user","message","logout","providedIn"],"sourceRoot":"","sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Auth,\n  signOut,\n  signInWithPhoneNumber,\n  RecaptchaVerifier,\n  signInWithCustomToken,\n  GoogleAuthProvider,\n  signInWithCredential\n} from '@angular/fire/auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  appVerifier: any;\n  confirmationResult: any;\n  constructor(private auth: Auth) {\n   \n  }\n\n  recaptcha() {\n    this.appVerifier = new RecaptchaVerifier('sign-in-button', {\n      size: 'invisible',\n      callback: (response) => {\n        console.log(response);\n      },\n      'expired-callback': () => {}\n    }, this.auth);\n  }\n\n  async signInWithPhoneNumber(phoneNumber) {\n    try {\n      if(!this.appVerifier) this.recaptcha();\n      const confirmationResult = await signInWithPhoneNumber(this.auth, phoneNumber, this.appVerifier);\n      this.confirmationResult = confirmationResult;\n      return confirmationResult;\n    } catch(e) {\n      throw(e);\n    }\n  }\n\n\n  async signInWithGoogle({token}) {\n    try {\n      const sToken = await signInWithCredential(this.auth, token)\n      console.log(\"its done\", sToken);\n    } catch(e) {\n      throw(e);\n    }\n  }\n\n  async verifyOtp(otp) {\n    try {\n      if(!this.appVerifier) this.recaptcha();\n      const result = await this.confirmationResult.confirm(otp);\n      console.log(result);\n      const user = result?.user;\n      console.log(user);\n    } catch(e) {\n      throw(e?.message);\n    }\n  }\n\n  logout() {\n    return signOut(this.auth);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}