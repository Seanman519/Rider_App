{"ast":null,"code":"import _asyncToGenerator from \"/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./autocomplete.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./autocomplete.component.scss?ngResource\";\nimport { Component, Input } from '@angular/core';\nimport { StatusBar } from '@capacitor/status-bar';\nimport { Client } from '@googlemaps/google-maps-services-js';\nimport { ModalController } from '@ionic/angular';\nimport { environment } from 'src/environments/environment';\nimport { AvatarService } from '../services/avatar.service';\nlet AutocompleteComponent = class AutocompleteComponent {\n  constructor(modalCtrl, avatar, viewCtrl, client) {\n    this.modalCtrl = modalCtrl;\n    this.avatar = avatar;\n    this.viewCtrl = viewCtrl;\n    this.client = client;\n    this.service = new google.maps.places.AutocompleteService();\n    this.skeleton = true;\n    this.autocompleteItems = [];\n    this.autocompleteItems2 = [];\n  }\n\n  ngOnInit() {\n    this.skeletOns = [{}, {}, {}, {}];\n    this.autocomplete = {\n      query2: this.locationAddress,\n      query: \"\"\n    };\n    console.log(this.locationAddress);\n  }\n\n  closeModal() {\n    let data = {\n      home: true\n    };\n    this.modalCtrl.dismiss(data);\n  }\n\n  closeSearch() {}\n\n  Show() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield StatusBar.setOverlaysWebView({\n        overlay: false\n      });\n      _this.hideImage = true;\n    })();\n  }\n\n  Hide() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield StatusBar.setOverlaysWebView({\n        overlay: true\n      });\n      _this2.hideImage = false;\n    })();\n  }\n\n  updateSearch2() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.autocomplete.query2 == \"\") {\n        _this3.autocompleteItems2 = [];\n        return;\n      }\n\n      console.log(_this3.autocomplete.query2, _this3.LatLng);\n      var place = new google.maps.LatLng(_this3.LatLng.lat, _this3.LatLng.lng);\n      _this3.skeleton = false;\n\n      _this3.service.getPlacePredictions({\n        input: _this3.autocomplete.query2,\n        location: place,\n        strictbounds: true,\n        radius: \"2000\",\n        zoom: 15,\n        types: [\"geocode\"],\n        componentRestrictions: {\n          country: [_this3.avatar.countryCode]\n        }\n      }, (predictions, status) => {\n        _this3.autocompleteItems2 = [];\n        console.log(predictions, status);\n        _this3.skeleton = true;\n        if (predictions != null) predictions.forEach(prediction => {\n          _this3.autocompleteItems2.push({\n            whole: prediction,\n            full: prediction.description,\n            place: prediction.structured_formatting.main_text,\n            city: prediction.structured_formatting.secondary_text,\n            searching: true\n          });\n        });\n      });\n    })();\n  }\n\n  updateSearch() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.autocomplete.query == \"\") {\n        _this4.autocompleteItems = [];\n        return;\n      }\n\n      console.log(_this4.autocomplete.query, _this4.LatLng);\n      var place = new google.maps.LatLng(_this4.LatLng.lat, _this4.LatLng.lng);\n      _this4.skeleton = false;\n\n      _this4.service.getPlacePredictions({\n        input: _this4.autocomplete.query,\n        location: place,\n        strictbounds: true,\n        radius: \"2000\",\n        zoom: 15,\n        types: [\"geocode\"],\n        componentRestrictions: {\n          country: ['US']\n        }\n      }, (predictions, status) => {\n        _this4.autocompleteItems = [];\n        console.log(predictions, status);\n        _this4.skeleton = true;\n        if (predictions != null) predictions.forEach(prediction => {\n          _this4.autocompleteItems.push({\n            whole: prediction,\n            full: prediction.description,\n            place: prediction.structured_formatting.main_text,\n            city: prediction.structured_formatting.secondary_text,\n            searching: true\n          });\n        });\n      });\n    })();\n  }\n\n  chooseItem(item) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.viewCtrl.dismiss(item);\n      console.log(item);\n    })();\n  }\n\n  chooseOnMap() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let data = {\n        pinOnMap: true\n      };\n      yield _this6.viewCtrl.dismiss(data);\n    })();\n  }\n\n  chooseItem2(item) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.autocomplete.query2 = item.full;\n      const results = yield _this7.client.geocode({\n        params: {\n          address: item.full,\n          key: environment.apiKey\n        },\n        timeout: 5000 // milliseconds\n\n      });\n      console.log(results);\n      var position = results[0].geometry.location;\n      _this7.data = [{\n        location: item.full,\n        lat: position.lat(),\n        lng: position.lng(),\n        edited: true\n      }];\n    })();\n  }\n\n};\n\nAutocompleteComponent.ctorParameters = () => [{\n  type: ModalController\n}, {\n  type: AvatarService\n}, {\n  type: ModalController\n}, {\n  type: Client\n}];\n\nAutocompleteComponent.propDecorators = {\n  LatLng: [{\n    type: Input\n  }],\n  locationAddress: [{\n    type: Input\n  }]\n};\nAutocompleteComponent = __decorate([Component({\n  selector: 'app-autocomplete',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AutocompleteComponent);\nexport { AutocompleteComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","StatusBar","Client","ModalController","environment","AvatarService","AutocompleteComponent","constructor","modalCtrl","avatar","viewCtrl","client","google","maps","places","AutocompleteService","autocompleteItems","autocompleteItems2","ngOnInit","skeletOns","autocomplete","query2","locationAddress","query","console","log","closeModal","data","home","dismiss","closeSearch","Show","setOverlaysWebView","overlay","hideImage","Hide","updateSearch2","LatLng","place","lat","lng","skeleton","service","getPlacePredictions","input","location","strictbounds","radius","zoom","types","componentRestrictions","country","countryCode","predictions","status","forEach","prediction","push","whole","full","description","structured_formatting","main_text","city","secondary_text","searching","updateSearch","chooseItem","item","chooseOnMap","pinOnMap","chooseItem2","results","geocode","params","address","key","apiKey","timeout","position","geometry","edited","selector","template"],"sourceRoot":"","sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/src/app/autocomplete/autocomplete.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { Client } from '@googlemaps/google-maps-services-js';\nimport { ModalController } from '@ionic/angular';\nimport { environment } from 'src/environments/environment';\nimport { AvatarService } from '../services/avatar.service';\ndeclare let google;\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n})\nexport class AutocompleteComponent implements OnInit {\n  @Input() LatLng;\n  @Input() locationAddress;\n  autocompleteItems;\n  service = new google.maps.places.AutocompleteService();\n  autocomplete: { query2: any; query: any; };\n  data: any[];\n  autocompleteItems2: any[];\n  skeleton: boolean = true;\n  skeletOns: any[];\n  hideImage: boolean;\n  constructor(private modalCtrl: ModalController, private avatar: AvatarService, private viewCtrl: ModalController, private client: Client) {\n    this.autocompleteItems = [];\n    this.autocompleteItems2 = [];\n   }\n  \n  ngOnInit() {\n    \n    this.skeletOns = [\n      {},{},{},{}\n    ]\n    this.autocomplete = {\n      query2: this.locationAddress,\n      query: \"\",\n    };\n    console.log(this.locationAddress);\n  }\n\n  closeModal(){\n    let data = {\n      home: true\n    }\n    this.modalCtrl.dismiss(data)\n  }\n\n  closeSearch(){\n    \n  }\n\n\n  async Show(){\n    await StatusBar.setOverlaysWebView({ overlay: false });\n \n    this.hideImage = true;\n  }\n\n  async Hide(){\n    await StatusBar.setOverlaysWebView({ overlay: true });\n   \n    this.hideImage = false;\n  }\n\n  async updateSearch2() {\n   \n    if (this.autocomplete.query2 == \"\") {\n      this.autocompleteItems2 = [];\n      return;\n    }\n    console.log(this.autocomplete.query2, this.LatLng)\n\n    var place = new google.maps.LatLng(this.LatLng.lat, this.LatLng.lng);\n\n    this.skeleton = false;\n\n    this.service.getPlacePredictions(\n      {\n        input: this.autocomplete.query2,\n        location: place,\n        strictbounds: true,\n        radius: \"2000\",\n        zoom: 15,\n        types: [\"geocode\"],\n        componentRestrictions: { country: [this.avatar.countryCode] },\n      },\n      (predictions, status) => {\n        this.autocompleteItems2 = [];\n        console.log(predictions, status);\n\n        this.skeleton = true;\n        \n          if (predictions != null)\n            predictions.forEach((prediction) => {\n              this.autocompleteItems2.push({\n                whole: prediction,\n                full: prediction.description,\n                place: prediction.structured_formatting.main_text,\n                city: prediction.structured_formatting.secondary_text,\n                searching: true\n              });\n            });\n        });\n      }\n\n\n  async updateSearch() {\n   \n    if (this.autocomplete.query == \"\") {\n      this.autocompleteItems = [];\n      return;\n    }\n    console.log(this.autocomplete.query, this.LatLng)\n\n    var place = new google.maps.LatLng(this.LatLng.lat, this.LatLng.lng);\n\n    this.skeleton = false;\n\n    this.service.getPlacePredictions(\n      {\n        input: this.autocomplete.query,\n        location: place,\n        strictbounds: true,\n        radius: \"2000\",\n        zoom: 15,\n        types: [\"geocode\"],\n        componentRestrictions: { country: ['US'] },\n      },\n      (predictions, status) => {\n        this.autocompleteItems = [];\n        console.log(predictions, status);\n\n        this.skeleton = true;\n        \n          if (predictions != null)\n            predictions.forEach((prediction) => {\n              this.autocompleteItems.push({\n                whole: prediction,\n                full: prediction.description,\n                place: prediction.structured_formatting.main_text,\n                city: prediction.structured_formatting.secondary_text,\n                searching: true\n              });\n            });\n        });\n      }\n\n\n\nasync chooseItem(item: any) {\n   \n  await this.viewCtrl.dismiss(item);\n  console.log(item);\n}\n\n\nasync chooseOnMap() {\n  let data = {\n    pinOnMap: true\n  }\n  await this.viewCtrl.dismiss(data);\n}\n\nasync chooseItem2 (item: any){\n  this.autocomplete.query2 = item.full;\n  const results = await this.client\n    .geocode({\n    params: {\n      address: item.full,\n      key: environment.apiKey,\n    },\n    timeout: 5000, // milliseconds\n  })\n  console.log(results);\n  var position = results[0].geometry.location;\n  this.data = [\n    {\n      location: item.full,\n      lat: position.lat(),\n      lng: position.lng(),\n      edited: true,\n    },\n  ];\n  \n\n }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}