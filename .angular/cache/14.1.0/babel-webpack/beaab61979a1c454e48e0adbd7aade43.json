{"ast":null,"code":"import _asyncToGenerator from \"/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { GoogleMap } from '@capacitor/google-maps';\nimport { environment } from 'src/environments/environment';\nimport { GeocodeService } from './geocode.service';\nimport { OverlayService } from './overlay.service';\nlet MapService = class MapService {\n  constructor(overlay, geocode) {\n    this.overlay = overlay;\n    this.geocode = geocode;\n    this.locationAddress = 'Loading..';\n  } //create google maps get the map movement listener\n\n\n  createMap(ref, coords) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.newMap = yield GoogleMap.create({\n          id: 'my-cool-map',\n          element: ref,\n          apiKey: environment.apiKey,\n          config: {\n            center: {\n              lat: 5.5122138,\n              lng: 7.4919135\n            },\n            zoom: 8\n          }\n        });\n        _this.LatLng = {\n          lat: coords.coords.latitude,\n          lng: coords.coords.longitude\n        };\n\n        _this.newMap.enableTrafficLayer(true);\n\n        _this.newMap.enableCurrentLocation(true);\n\n        yield _this.newMap.setCamera({\n          animate: true,\n          animationDuration: 500,\n          zoom: 15,\n          coordinate: _this.LatLng\n        });\n        const address = yield _this.geocode.getAddress(_this.LatLng.lat, _this.LatLng.lng);\n        _this.actualLocation = address.data.results[0].formatted_address;\n        _this.locationAddress = address.data.results[1].address_components[0].long_name + ' ' + address.data.results[1].address_components[1].long_name;\n      } catch (e) {\n        alert(e);\n      }\n    })();\n  }\n\n  CalculateCenter(locations) {\n    return _asyncToGenerator(function* () {\n      var latitude = 0,\n          longitude = 0;\n\n      for (var location of locations) {\n        longitude += location.geoCode.longitude;\n        latitude += location.geoCode.latitude;\n      }\n\n      latitude = latitude / locations.length;\n      longitude = longitude / locations.length;\n      yield latitude, longitude;\n      return {\n        latitude,\n        longitude\n      };\n    })();\n  }\n\n  getBoundsZoomLevel(bounds, mapDim) {\n    return _asyncToGenerator(function* () {\n      var WORLD_DIM = {\n        height: 256,\n        width: 256\n      };\n      var ZOOM_MAX = 21;\n\n      function latRad(lat) {\n        var sin = Math.sin(lat * Math.PI / 180);\n        var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n        return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n      }\n\n      function zoom(mapPx, worldPx, fraction) {\n        return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);\n      }\n\n      var ne = bounds.getNorthEast();\n      var sw = bounds.getSouthWest();\n      var latFraction = (latRad(ne.lat()) - latRad(sw.lat())) / Math.PI;\n      var lngDiff = ne.lng() - sw.lng();\n      var lngFraction = (lngDiff < 0 ? lngDiff + 360 : lngDiff) / 360;\n      var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);\n      var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);\n      yield Math.min(latZoom, lngZoom, ZOOM_MAX);\n      return Math.min(latZoom, lngZoom, ZOOM_MAX);\n    })();\n  }\n\n};\n\nMapService.ctorParameters = () => [{\n  type: OverlayService\n}, {\n  type: GeocodeService\n}];\n\nMapService = __decorate([Injectable({\n  providedIn: 'root'\n})], MapService);\nexport { MapService };","map":{"version":3,"mappings":"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","names":["Injectable","GoogleMap","environment","GeocodeService","OverlayService","MapService","constructor","overlay","geocode","createMap","ref","coords","newMap","create","id","element","apiKey","config","center","lat","lng","zoom","LatLng","latitude","longitude","enableTrafficLayer","enableCurrentLocation","setCamera","animate","animationDuration","coordinate","address","getAddress","actualLocation","data","results","formatted_address","locationAddress","address_components","long_name","e","alert","CalculateCenter","locations","location","geoCode","length","getBoundsZoomLevel","bounds","mapDim","WORLD_DIM","height","width","ZOOM_MAX","latRad","sin","Math","PI","radX2","log","max","min","mapPx","worldPx","fraction","floor","LN2","ne","getNorthEast","sw","getSouthWest","latFraction","lngDiff","lngFraction","latZoom","lngZoom","providedIn"],"sourceRoot":"","sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/src/app/services/map.service.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { throwError } from 'rxjs';\n import { GoogleMap, MapType } from '@capacitor/google-maps';\nimport { environment } from 'src/environments/environment';\nimport { GeocodeService } from './geocode.service';\nimport { OverlayService } from './overlay.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n  LatLng: { lat: any; lng: any; };\n  locationAddress: string = 'Loading..';\n  showResetLocationButton: boolean;\n  mapPinStage: any;\n  D_LatLng: { lat: any; lng: any; };\n  actualLocation: any;\n   exampleMapId: any;\n  newMap: GoogleMap;\n\n  constructor(private overlay: OverlayService, private geocode: GeocodeService) {\n   }\n\n  //create google maps get the map movement listener\n  async createMap( ref, coords ) {\n    try{\n     this.newMap = await GoogleMap.create({\n       id: 'my-cool-map',\n       element: ref,\n       apiKey: environment.apiKey,\n       config: {\n         center: {\n           lat: 5.5122138,\n           lng: 7.4919135\n         },\n         zoom: 8,\n       },\n     });\n \n     this.LatLng =  {\n       lat: coords.coords.latitude,\n       lng: coords.coords.longitude\n     }\n\n\n    this.newMap.enableTrafficLayer(true);\n    this.newMap.enableCurrentLocation(true);\n     await this.newMap.setCamera({\n       animate: true,\n       animationDuration: 500,\n       zoom: 15,\n       coordinate: this.LatLng\n     })\n        const address = await this.geocode.getAddress(this.LatLng.lat, this.LatLng.lng)\n        this.actualLocation = address.data.results[0].formatted_address;\n        this.locationAddress = address.data.results[1].address_components[0].long_name + ' ' + address.data.results[1].address_components[1].long_name;\n       \n   }catch(e){\n      alert(e)\n   }\n }\n\n \n\n\n async CalculateCenter(locations) {\n  var latitude = 0,\n    longitude = 0;\n\n  for (var location of locations) {\n    longitude += location.geoCode.longitude;\n    latitude += location.geoCode.latitude;\n  }\n  latitude = latitude / locations.length;\n  longitude = longitude / locations.length;\n  await latitude, longitude\n  return {\n    latitude,\n    longitude\n  };\n}\n\nasync getBoundsZoomLevel(bounds, mapDim) {\n  var WORLD_DIM = { height: 256, width: 256 };\n  var ZOOM_MAX = 21;\n\n  function latRad(lat) {\n      var sin = Math.sin(lat * Math.PI / 180);\n      var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n      return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  function zoom(mapPx, worldPx, fraction) {\n      return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);\n  }\n\n  var ne = bounds.getNorthEast();\n  var sw = bounds.getSouthWest();\n\n  var latFraction = (latRad(ne.lat()) - latRad(sw.lat())) / Math.PI;\n\n  var lngDiff = ne.lng() - sw.lng();\n  var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;\n\n  var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);\n  var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);\n\n  await Math.min(latZoom, lngZoom, ZOOM_MAX);\n  return Math.min(latZoom, lngZoom, ZOOM_MAX);\n}\n\n\n\n \n \n \n}\n"]},"metadata":{},"sourceType":"module"}