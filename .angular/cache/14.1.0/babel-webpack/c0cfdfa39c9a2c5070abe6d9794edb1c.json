{"ast":null,"code":"import Base64 from 'crypto-js/enc-base64';\nimport HmacSHA1 from 'crypto-js/hmac-sha1';\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Create a signature for a path and query string using HmacSHA1.\n *\n * ```ts\n * const signature = createSignatureForPathAndQuery(\"/some-path?foo=bar\", \"secret\");\n * ```\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\n\nfunction createSignatureForPathAndQuery(pathAndQuery, secret) {\n  var decodedSecret = decodeSecret(secret); // Sign the url with the decoded secret\n\n  var unsafeSignature = HmacSHA1(pathAndQuery, decodedSecret).toString(Base64); // Convert from true base64 to 'web safe' base64\n\n  return unsafeSignature.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/**\n * Create a signature for a Google Maps request [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) or url string.\n *\n * ```ts\n * const signature = createSignature(\"https://example.com/some-path?foo=bar\", \"secret\");\n * ```\n *\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\n\n\nfunction createSignature(unsignedUrl, secret) {\n  if (typeof unsignedUrl === \"string\") {\n    unsignedUrl = new URL(unsignedUrl);\n  } // Strip off the protocol, scheme, and host portions of the URL, leaving only the path and the query\n\n\n  var pathAndQuery = \"\".concat(unsignedUrl.pathname).concat(unsignedUrl.search);\n  return createSignatureForPathAndQuery(pathAndQuery, secret);\n}\n/**\n * Returns a new [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) having a signature parameter.\n *\n * ```ts\n * const signedUrl = signUrl(\"https://example.com/some-path?foo=bar\", \"secret\");\n * signedUrl.href; // \"https://example.com/some-path?foo=bar&signature=...\"\n * ```\n *\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\n\n\nfunction signUrl(unsignedUrl, secret) {\n  if (typeof unsignedUrl === \"string\") {\n    unsignedUrl = new URL(unsignedUrl);\n  }\n\n  return new URL(unsignedUrl.toString() + \"&signature=\" + createSignature(unsignedUrl, secret));\n}\n\nfunction decodeSecret(secret) {\n  // Convert from 'web safe' base64 to true base64\n  var unsafeSecret = secret.replace(/-/g, \"+\").replace(/_/g, \"/\"); // Base64 decode the secret\n\n  return Base64.parse(unsafeSecret);\n}\n\nexport { createSignature, createSignatureForPathAndQuery, signUrl };","map":{"version":3,"names":["Base64","HmacSHA1","createSignatureForPathAndQuery","pathAndQuery","secret","decodedSecret","decodeSecret","unsafeSignature","toString","replace","createSignature","unsignedUrl","URL","concat","pathname","search","signUrl","unsafeSecret","parse"],"sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@googlemaps/url-signature/dist/index.esm.js"],"sourcesContent":["import Base64 from 'crypto-js/enc-base64';\nimport HmacSHA1 from 'crypto-js/hmac-sha1';\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a signature for a path and query string using HmacSHA1.\n *\n * ```ts\n * const signature = createSignatureForPathAndQuery(\"/some-path?foo=bar\", \"secret\");\n * ```\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\nfunction createSignatureForPathAndQuery(pathAndQuery, secret) {\n    var decodedSecret = decodeSecret(secret);\n    // Sign the url with the decoded secret\n    var unsafeSignature = HmacSHA1(pathAndQuery, decodedSecret).toString(Base64);\n    // Convert from true base64 to 'web safe' base64\n    return unsafeSignature.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/**\n * Create a signature for a Google Maps request [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) or url string.\n *\n * ```ts\n * const signature = createSignature(\"https://example.com/some-path?foo=bar\", \"secret\");\n * ```\n *\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\nfunction createSignature(unsignedUrl, secret) {\n    if (typeof unsignedUrl === \"string\") {\n        unsignedUrl = new URL(unsignedUrl);\n    }\n    // Strip off the protocol, scheme, and host portions of the URL, leaving only the path and the query\n    var pathAndQuery = \"\".concat(unsignedUrl.pathname).concat(unsignedUrl.search);\n    return createSignatureForPathAndQuery(pathAndQuery, secret);\n}\n/**\n * Returns a new [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) having a signature parameter.\n *\n * ```ts\n * const signedUrl = signUrl(\"https://example.com/some-path?foo=bar\", \"secret\");\n * signedUrl.href; // \"https://example.com/some-path?foo=bar&signature=...\"\n * ```\n *\n * @param unsignedUrl The URL to sign.\n * @param secret The secret to use for signing.\n * @returns The signature of the signed url.\n */\nfunction signUrl(unsignedUrl, secret) {\n    if (typeof unsignedUrl === \"string\") {\n        unsignedUrl = new URL(unsignedUrl);\n    }\n    return new URL(unsignedUrl.toString() +\n        \"&signature=\" +\n        createSignature(unsignedUrl, secret));\n}\nfunction decodeSecret(secret) {\n    // Convert from 'web safe' base64 to true base64\n    var unsafeSecret = secret.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 decode the secret\n    return Base64.parse(unsafeSecret);\n}\n\nexport { createSignature, createSignatureForPathAndQuery, signUrl };\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,8BAAT,CAAwCC,YAAxC,EAAsDC,MAAtD,EAA8D;EAC1D,IAAIC,aAAa,GAAGC,YAAY,CAACF,MAAD,CAAhC,CAD0D,CAE1D;;EACA,IAAIG,eAAe,GAAGN,QAAQ,CAACE,YAAD,EAAeE,aAAf,CAAR,CAAsCG,QAAtC,CAA+CR,MAA/C,CAAtB,CAH0D,CAI1D;;EACA,OAAOO,eAAe,CAACE,OAAhB,CAAwB,KAAxB,EAA+B,GAA/B,EAAoCA,OAApC,CAA4C,KAA5C,EAAmD,GAAnD,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBC,WAAzB,EAAsCP,MAAtC,EAA8C;EAC1C,IAAI,OAAOO,WAAP,KAAuB,QAA3B,EAAqC;IACjCA,WAAW,GAAG,IAAIC,GAAJ,CAAQD,WAAR,CAAd;EACH,CAHyC,CAI1C;;;EACA,IAAIR,YAAY,GAAG,GAAGU,MAAH,CAAUF,WAAW,CAACG,QAAtB,EAAgCD,MAAhC,CAAuCF,WAAW,CAACI,MAAnD,CAAnB;EACA,OAAOb,8BAA8B,CAACC,YAAD,EAAeC,MAAf,CAArC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,OAAT,CAAiBL,WAAjB,EAA8BP,MAA9B,EAAsC;EAClC,IAAI,OAAOO,WAAP,KAAuB,QAA3B,EAAqC;IACjCA,WAAW,GAAG,IAAIC,GAAJ,CAAQD,WAAR,CAAd;EACH;;EACD,OAAO,IAAIC,GAAJ,CAAQD,WAAW,CAACH,QAAZ,KACX,aADW,GAEXE,eAAe,CAACC,WAAD,EAAcP,MAAd,CAFZ,CAAP;AAGH;;AACD,SAASE,YAAT,CAAsBF,MAAtB,EAA8B;EAC1B;EACA,IAAIa,YAAY,GAAGb,MAAM,CAACK,OAAP,CAAe,IAAf,EAAqB,GAArB,EAA0BA,OAA1B,CAAkC,IAAlC,EAAwC,GAAxC,CAAnB,CAF0B,CAG1B;;EACA,OAAOT,MAAM,CAACkB,KAAP,CAAaD,YAAb,CAAP;AACH;;AAED,SAASP,eAAT,EAA0BR,8BAA1B,EAA0Dc,OAA1D"},"metadata":{},"sourceType":"module"}