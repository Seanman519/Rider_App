{"ast":null,"code":"import _asyncToGenerator from \"/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Auth } from '@angular/fire/auth';\nimport { collection, collectionData, doc, docData, endAt, Firestore, getDocs, orderBy, query, setDoc, startAt, updateDoc, deleteDoc, serverTimestamp, addDoc } from '@angular/fire/firestore';\nimport { getDownloadURL, ref, Storage, uploadString } from '@angular/fire/storage';\nimport { distanceBetween, geohashForLocation, geohashQueryBounds } from 'geofire-common';\nimport { AuthService } from './auth.service';\nlet AvatarService = class AvatarService {\n  constructor(auth, firestore, storage, http, authService) {\n    var _this = this;\n\n    this.auth = auth;\n    this.firestore = firestore;\n    this.storage = storage;\n    this.http = http;\n    this.authService = authService;\n    this.auth.onAuthStateChanged(user => {\n      if (user) {\n        this.user = user;\n        this.driverCollection = collection(this.firestore, 'Drivers');\n        this.getUserProfile(user).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            _this.profile = data;\n\n            if (_this.profile) {\n              if (!_this.profile.Rider_phone) // await this.authService.logout();\n                if (_this.profile.Rider_name) _this.userName = _this.profile.Rider_name;\n              _this.pathM = `uploads/${_this.profile.uid}/profile.png`;\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        this.http.get(\"http://ip-api.com/json\").subscribe(res => {\n          console.log('res ', res);\n          this.countryCode = res.countryCode || 'NG';\n        });\n      } else {\n        this.userName = \"None\";\n      }\n    });\n  }\n\n  getUserProfile(user) {\n    const userDocRef = doc(this.firestore, `Riders/${user.uid}`);\n    return docData(userDocRef);\n  } //Request a ride with your details and remove the driver from list of available drivers to avoid another request from someone else\n\n\n  RequestRideWithRiderDetails(user_Loc_coord, des, loco, user_Des_coord, ID, price, cash) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          Loc_lat: user_Loc_coord.lat,\n          Loc_lng: user_Loc_coord.lng,\n          Rider_id: _this2.profile.Rider_id,\n          Rider_name: _this2.profile.Rider_name,\n          Rider_phone: _this2.profile.Rider_phone,\n          Rider_imgUrl: _this2.profile.Rider_imgUrl,\n          Rider_rating: _this2.profile.Rider_rating,\n          Des_lat: user_Des_coord.lat,\n          Des_lng: user_Des_coord.lng,\n          Rider_Location: loco,\n          Rider_Destination: des,\n          Rider_email: _this2.profile.Rider_email,\n          countDown: 20,\n          cancel: false,\n          price: price,\n          cash: cash\n        };\n        const userDocRef = doc(_this2.firestore, 'Drivers', ID);\n        yield updateDoc(userDocRef, {\n          onlineState: false\n        });\n        console.log('deleted current driver ID');\n        yield setDoc(doc(_this2.firestore, \"Request\", ID), { ...loc\n        });\n        console.log('Added New driver ID');\n      } catch (e) {\n        throw new Error(e);\n      }\n    })();\n  }\n\n  RestartRequestSinceReject(ID) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const userDocRef = doc(_this3.firestore, 'Request', ID);\n      yield updateDoc(userDocRef, {\n        cancel: false\n      });\n    })();\n  } //delete the driver that has a request sent to him.\n\n\n  deleDriverFromRequest(ID) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield deleteDoc(doc(_this4.firestore, \"Request\", ID));\n    })();\n  }\n\n  cancelRide(ID) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const userDocRef = doc(_this5.firestore, 'Request', ID);\n      yield updateDoc(userDocRef, {\n        cancel: true\n      });\n    })();\n  } //Push driver info into the request database\n\n\n  PushDriverToRequest(Driver) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          geohash: Driver.geohash,\n          Driver_lat: Driver.Driver_lat,\n          Driver_lng: Driver.Driver_lng,\n          Driver_id: Driver.Driver_id,\n          Driver_name: Driver.Driver_name,\n          Driver_car: Driver.Driver_car,\n          Driver_imgUrl: Driver.Driver_imgUrl,\n          Driver_rating: Driver.Driver_rating,\n          distance: 0,\n          duration: 0,\n          seats: Driver.seats,\n          start: false,\n          stop: Driver.stop,\n          intransit: Driver.intransit,\n          cancel: Driver.cancel,\n          Driver_cartype: Driver.Driver_cartype,\n          Driver_plate: Driver.Driver_plate,\n          time: ''\n        };\n        yield updateDoc(doc(_this6.firestore, \"Request\", Driver.Driver_id), { ...loc\n        });\n      } catch (e) {\n        throw new Error(e);\n      }\n\n      console.log('done');\n    })();\n  }\n\n  createHistory(Driver) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          geohash: Driver.geohash,\n          Driver_lat: Driver.Driver_lat,\n          Driver_lng: Driver.Driver_lng,\n          Driver_id: Driver.Driver_id,\n          Driver_name: Driver.Driver_name,\n          Driver_car: Driver.Driver_car,\n          Driver_imgUrl: Driver.Driver_imgUrl,\n          Driver_rating: Driver.Driver_rating,\n          distance: 0,\n          duration: 0,\n          seats: Driver.seats,\n          start: true,\n          stop: Driver.stop,\n          intransit: Driver.intransit,\n          cancel: Driver.cancel,\n          Driver_cartype: Driver.Driver_cartype,\n          Driver_plate: Driver.Driver_plate,\n          time: serverTimestamp()\n        };\n        yield setDoc(doc(_this7.firestore, \"Riders\", `${_this7.auth.currentUser.uid}/History/${Driver.Driver_id}`), { ...loc\n        });\n      } catch (e) {\n        throw new Error(e);\n      }\n\n      console.log('done');\n    })();\n  }\n\n  UpdateCountDown(time, Driver) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const userDocRef = doc(_this8.firestore, \"Request\", Driver.Driver_id);\n        yield updateDoc(userDocRef, {\n          countDown: time\n        });\n        return true;\n      } catch (e) {\n        alert(e);\n        return null;\n      }\n    })();\n  }\n\n  AddKnownPlace(place) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const userDocRef = doc(_this9.firestore, \"Riders\", `${_this9.auth.currentUser.uid}/KnownPlaces/${place.full}`);\n        yield setDoc(userDocRef, {\n          place\n        });\n        return true;\n      } catch (e) {\n        alert(e);\n        return null;\n      }\n    })();\n  } ///update driver information\n\n\n  CreateandUpdateDriver(coord, ID) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          geohash: geohashForLocation([coord.coords.latitude, coord.coords.longitude]),\n          Driver_lat: coord.coords.latitude,\n          Driver_lng: coord.coords.longitude,\n          Driver_id: ID,\n          Driver_name: 'james',\n          Driver_car: 'Nissan',\n          Driver_imgUrl: '',\n          Driver_rating: 0,\n          distance: 0,\n          duration: 0,\n          seats: 1,\n          start: false,\n          stop: false,\n          intransit: false,\n          cancel: false,\n          Driver_cartype: '',\n          Driver_plate: '',\n          time: ''\n        };\n        yield setDoc(doc(_this10.firestore, \"Drivers\", ID), { ...loc\n        });\n      } catch (e) {\n        throw new Error(e);\n      }\n\n      console.log('done');\n    })();\n  } ///create a new driver and publish info to database\n\n\n  CreateNewDriver(coord) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          geohash: geohashForLocation([coord.coords.latitude, coord.coords.longitude]),\n          Driver_lat: coord.coords.latitude,\n          Driver_lng: coord.coords.longitude,\n          Driver_id: 'Driver ' + Math.random(),\n          Driver_name: 'james',\n          Driver_car: 'Nissan',\n          Driver_imgUrl: '',\n          Driver_rating: 0,\n          distance: 0,\n          duration: 0,\n          seats: 1,\n          start: false,\n          stop: false,\n          intransit: false,\n          cancel: false,\n          Driver_cartype: '',\n          Driver_plate: '',\n          time: ''\n        };\n        yield setDoc(doc(_this11.firestore, \"Drivers\", 'Driver ' + Math.random()), { ...loc\n        });\n      } catch (e) {\n        throw new Error(e);\n      }\n    })();\n  } //geoquery, sort drivers within a specified radius and seperate them from the others\n\n\n  checkDriversWithin(center, radiusInM) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const userDocRef = collection(_this12.firestore, `Drivers`); // Each item in 'bounds' represents a startAt/endAt pair. We have to issue\n        // a separate query for each pair. There can be up to 9 pairs of bounds\n        // depending on overlap, but in most cases there are 4.\n\n        const bounds = geohashQueryBounds(center, radiusInM);\n        const promises = [];\n\n        for (const b of bounds) {\n          const q = query(userDocRef, orderBy(\"geohash\"), startAt(b[0]), endAt(b[1]));\n          _this12.directory = q;\n          const documentSnapshots = yield getDocs(q);\n          documentSnapshots.docChanges().forEach(doc => {\n            // alert(JSON.stringify(doc.doc));\n            // doc.data() is never undefined for query doc snapshots\n            console.log(doc.doc, \" => \", doc.doc.data());\n            promises.push(doc.doc.data());\n          });\n        } // Collect all the query results together into a single list\n\n\n        const j = yield Promise.all(promises).then(snapshots => {\n          const matchingDocs = [];\n\n          for (const snap of snapshots) {\n            const lat = snap.Driver_lat;\n            const lng = snap.Driver_lng; // We have to filter out a few false positives due to GeoHash\n            // accuracy, but most will match\n\n            const distanceInKm = distanceBetween([lat, lng], center);\n            const distanceInM = distanceInKm * 1000;\n            console.log(snap);\n            snap.distance = distanceInM;\n            snap.duration = _this12.time_convert(distanceInM);\n            console.log(distanceInM, radiusInM);\n\n            if (distanceInM <= radiusInM) {\n              matchingDocs.push(snap);\n            }\n          }\n\n          return matchingDocs;\n        });\n        if (j) return j;\n      } catch (e) {\n        throw new Error(e);\n      }\n    })();\n  }\n\n  time_convert(num) {\n    var minutes = Math.floor(num / 60);\n    return minutes;\n  }\n\n  getDriver() {\n    return collectionData(this.driverCollection, {\n      idField: 'id'\n    });\n  }\n\n  update(pokemon) {\n    const pokemonDocumentReference = doc(this.firestore, `pokemon/${pokemon.Driver_id}`);\n    return updateDoc(pokemonDocumentReference, { ...pokemon\n    });\n  }\n\n  uploadImage(cameraFile, uid) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const storageRef = ref(_this13.storage, _this13.pathM);\n\n      try {\n        yield uploadString(storageRef, cameraFile.base64String, 'base64');\n        const imageUrl = yield getDownloadURL(storageRef);\n        const userDocRef = doc(_this13.firestore, `Riders/${uid}`);\n        yield setDoc(userDocRef, {\n          imageUrl\n        });\n        return true;\n      } catch (e) {\n        return null;\n      }\n    })();\n  }\n\n  createUser(name, email, img, phone, uid) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          Loc_lat: 0,\n          Loc_lng: 0,\n          Rider_id: uid,\n          Rider_name: name,\n          Rider_phone: phone,\n          Rider_imgUrl: img,\n          Rider_rating: 0,\n          Des_lat: 0,\n          Des_lng: 0,\n          Rider_Location: '',\n          Rider_Destination: '',\n          Rider_email: email,\n          countDown: 0,\n          cancel: false,\n          price: 0,\n          cash: true\n        };\n        yield setDoc(doc(_this14.firestore, \"Riders\", uid), { ...loc\n        });\n        return true;\n      } catch (e) {\n        return null;\n      }\n    })();\n  }\n\n  getMessage() {\n    const userDocRef = collection(this.firestore, `Messages/${this.auth.currentUser.uid}/messages`);\n    return collectionData(userDocRef);\n  }\n\n  getCards() {\n    const userDocRef = collection(this.firestore, `Riders/${this.auth.currentUser.uid}/Cards`);\n    return collectionData(userDocRef);\n  }\n\n  getKnownPlaces() {\n    const userDocRef = collection(this.firestore, `Riders/${this.auth.currentUser.uid}/KnownPlaces`);\n    return collectionData(userDocRef);\n  }\n\n  getDrivers() {\n    const userDocRef = collection(this.firestore, `Drivers`);\n    return collectionData(userDocRef);\n  }\n\n  addChatMessage(msg) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield addDoc(collection(_this15.firestore, `Messages/${_this15.profile.Rider_id}/messages`), {\n        msg: msg,\n        from: _this15.auth.currentUser.uid,\n        createdAt: serverTimestamp(),\n        myMsg: true,\n        fromName: _this15.profile.Rider_name\n      });\n    })();\n  }\n\n  createCard(name, number, type, id) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          name: name,\n          number: number,\n          type: type,\n          id: id,\n          selected: true\n        };\n        yield setDoc(doc(_this16.firestore, \"Riders\", `${_this16.profile.Rider_id}/Cards/${name}`), { ...loc\n        });\n        return true;\n      } catch (e) {\n        alert(e);\n        return null;\n      }\n    })();\n  }\n\n  updateDriverOnlineState(ID) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const userDocRef = doc(_this17.firestore, 'Drivers', ID);\n        yield updateDoc(userDocRef, {\n          onlineState: true\n        });\n        return true;\n      } catch (e) {\n        alert(e);\n        return null;\n      }\n    })();\n  }\n\n  updateCArd(name, number, type, id, state) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const loc = {\n          name: name,\n          number: number,\n          type: type,\n          id: id,\n          selected: state\n        };\n        yield updateDoc(doc(_this18.firestore, \"Riders\", `${_this18.profile.Rider_id}/Cards/${name}`), { ...loc\n        });\n        return true;\n      } catch (e) {\n        alert(e);\n        return null;\n      }\n    })();\n  }\n\n};\n\nAvatarService.ctorParameters = () => [{\n  type: Auth\n}, {\n  type: Firestore\n}, {\n  type: Storage\n}, {\n  type: HttpClient\n}, {\n  type: AuthService\n}];\n\nAvatarService = __decorate([Injectable({\n  providedIn: 'root'\n})], AvatarService);\nexport { AvatarService };","map":{"version":3,"mappings":"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","names":["HttpClient","Injectable","Auth","collection","collectionData","doc","docData","endAt","Firestore","getDocs","orderBy","query","setDoc","startAt","updateDoc","deleteDoc","serverTimestamp","addDoc","getDownloadURL","ref","Storage","uploadString","distanceBetween","geohashForLocation","geohashQueryBounds","AuthService","AvatarService","constructor","auth","firestore","storage","http","authService","onAuthStateChanged","user","driverCollection","getUserProfile","subscribe","data","profile","Rider_phone","Rider_name","userName","pathM","uid","get","res","console","log","countryCode","userDocRef","RequestRideWithRiderDetails","user_Loc_coord","des","loco","user_Des_coord","ID","price","cash","loc","Loc_lat","lat","Loc_lng","lng","Rider_id","Rider_imgUrl","Rider_rating","Des_lat","Des_lng","Rider_Location","Rider_Destination","Rider_email","countDown","cancel","onlineState","e","Error","RestartRequestSinceReject","deleDriverFromRequest","cancelRide","PushDriverToRequest","Driver","geohash","Driver_lat","Driver_lng","Driver_id","Driver_name","Driver_car","Driver_imgUrl","Driver_rating","distance","duration","seats","start","stop","intransit","Driver_cartype","Driver_plate","time","createHistory","currentUser","UpdateCountDown","alert","AddKnownPlace","place","full","CreateandUpdateDriver","coord","coords","latitude","longitude","CreateNewDriver","Math","random","checkDriversWithin","center","radiusInM","bounds","promises","b","q","directory","documentSnapshots","docChanges","forEach","push","j","Promise","all","then","snapshots","matchingDocs","snap","distanceInKm","distanceInM","time_convert","num","minutes","floor","getDriver","idField","update","pokemon","pokemonDocumentReference","uploadImage","cameraFile","storageRef","base64String","imageUrl","createUser","name","email","img","phone","getMessage","getCards","getKnownPlaces","getDrivers","addChatMessage","msg","from","createdAt","myMsg","fromName","createCard","number","type","id","selected","updateDriverOnlineState","updateCArd","state","providedIn"],"sourceRoot":"","sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/src/app/services/avatar.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Auth } from '@angular/fire/auth';\nimport { collection, collectionData, CollectionReference, doc, docData, DocumentData, endAt, Firestore, getDocs, DocumentChange, orderBy, query, setDoc, startAt, updateDoc, onSnapshot, deleteDoc, serverTimestamp, addDoc, limit, limitToLast } from '@angular/fire/firestore';\nimport {\n  getDownloadURL,\n  ref,\n  Storage,\n  uploadString,\n} from '@angular/fire/storage';\nimport { Photo } from '@capacitor/camera';\nimport { distanceBetween, geohashForLocation, geohashQueryBounds} from 'geofire-common';\nimport { Observable } from 'rxjs';\nimport { Card } from '../interfaces/card';\nimport { Drivers } from '../interfaces/drivers';\nimport { Rider } from '../interfaces/rider';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AvatarService {\n  \n  private driverCollection: CollectionReference<DocumentData>;\n  directory: any;\n  userUID: string;\n  userName: string;\n  userEmail: string;\n  profile: DocumentData;\n  pathM: string;\n  countryCode: any;\n  user: import(\"@angular/fire/auth\").User;\n\n  constructor(\n    private auth: Auth,\n    public firestore: Firestore,\n    private storage: Storage,\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    this.auth.onAuthStateChanged((user)=>{\n      if (user){\n        this.user = user;\n      this.driverCollection = collection(this.firestore, 'Drivers');\n\n    \n     this.getUserProfile(user).subscribe(async (data) => {\n      this.profile = data;\n\n      if (this.profile){\n      if (!this.profile.Rider_phone)\n      // await this.authService.logout();\n\n    \n\n      if (this.profile.Rider_name)\n      this.userName = this.profile.Rider_name;\n\n      this.pathM = `uploads/${this.profile.uid}/profile.png`;\n      }\n     })\n       this.http.get(\"http://ip-api.com/json\").subscribe((res: any) => {\n          \n        console.log('res ', res);\n\n\n        this.countryCode = res.countryCode || 'NG';\n     \n     })\n    }else{\n      this.userName = \"None\";\n      \n    }\n  })\n\n \n  }\n\n   getUserProfile(user) {\n    const userDocRef = doc(this.firestore, `Riders/${user.uid}`);\n     return docData(userDocRef);\n  }\n\n\n  //Request a ride with your details and remove the driver from list of available drivers to avoid another request from someone else\n  async RequestRideWithRiderDetails(user_Loc_coord, des, loco, user_Des_coord, ID, price, cash){\n    try{\n      const loc: Rider = {\n        Loc_lat: user_Loc_coord.lat,\n        Loc_lng: user_Loc_coord.lng,\n        Rider_id: this.profile.Rider_id,\n        Rider_name: this.profile.Rider_name,\n        Rider_phone: this.profile.Rider_phone,\n        Rider_imgUrl: this.profile.Rider_imgUrl,\n        Rider_rating: this.profile.Rider_rating,\n        Des_lat: user_Des_coord.lat,\n        Des_lng: user_Des_coord.lng,\n        Rider_Location: loco,\n        Rider_Destination: des,\n        Rider_email: this.profile.Rider_email,\n        countDown: 20,\n        cancel: false,\n        price: price,\n        cash: cash\n      };\n     \n      const userDocRef = doc(this.firestore, 'Drivers', ID)\n      await updateDoc(userDocRef, {onlineState: false,});\n      console.log('deleted current driver ID');\n      await setDoc(doc(this.firestore, \"Request\",  ID), { ...loc});\n      console.log('Added New driver ID');\n    }catch(e){\n      throw new Error(e);\n      \n    }\n  }\n\n  async RestartRequestSinceReject(ID){\n    const userDocRef = doc(this.firestore, 'Request', ID)\n    await updateDoc(userDocRef, {cancel: false});\n  }\n\n//delete the driver that has a request sent to him.\n  async deleDriverFromRequest(ID){\n    await deleteDoc(doc(this.firestore, \"Request\", ID))\n  }\n\n  async cancelRide(ID){\n    const userDocRef = doc(this.firestore, 'Request', ID)\n    await updateDoc(userDocRef, {cancel: true});\n  }\n\n  //Push driver info into the request database\n  async PushDriverToRequest(Driver){\n    try{\n    const loc: Drivers = {\n      geohash: Driver.geohash,\n      Driver_lat: Driver.Driver_lat,\n      Driver_lng: Driver.Driver_lng,\n      Driver_id: Driver.Driver_id,\n      Driver_name: Driver.Driver_name,\n      Driver_car: Driver.Driver_car,\n      Driver_imgUrl: Driver.Driver_imgUrl,\n      Driver_rating: Driver.Driver_rating,\n      distance: 0,\n      duration: 0,\n      seats: Driver.seats,\n      start: false,\n      stop: Driver.stop,\n      intransit: Driver.intransit,\n      cancel: Driver.cancel,\n      Driver_cartype: Driver.Driver_cartype,\n      Driver_plate: Driver.Driver_plate,\n      time: ''\n    };\n    await updateDoc(doc(this.firestore, \"Request\",  Driver.Driver_id), { ...loc});\n  }catch(e){\n    throw new Error(e);\n    \n  }\n   \n    console.log('done')\n  }\n\n\n  async createHistory(Driver){\n    try{\n    const loc: Drivers = {\n      geohash: Driver.geohash,\n      Driver_lat: Driver.Driver_lat,\n      Driver_lng: Driver.Driver_lng,\n      Driver_id: Driver.Driver_id,\n      Driver_name: Driver.Driver_name,\n      Driver_car: Driver.Driver_car,\n      Driver_imgUrl: Driver.Driver_imgUrl,\n      Driver_rating: Driver.Driver_rating,\n      distance: 0,\n      duration: 0,\n      seats: Driver.seats,\n      start: true,\n      stop: Driver.stop,\n      intransit: Driver.intransit,\n      cancel: Driver.cancel,\n      Driver_cartype: Driver.Driver_cartype,\n      Driver_plate: Driver.Driver_plate,\n      time: serverTimestamp(),\n    };\n    await setDoc(doc(this.firestore, \"Riders\",  `${this.auth.currentUser.uid}/History/${Driver.Driver_id}`), { ...loc});\n  }catch(e){\n    throw new Error(e);\n    \n  }\n   \n    console.log('done')\n  }\n\n\n  async UpdateCountDown(time, Driver){\n    try {\n      const userDocRef = doc(this.firestore, \"Request\",  Driver.Driver_id)\n      await updateDoc(userDocRef, {\n        countDown: time,\n      });\n      return true;\n    } catch (e) {\n      alert(e)\n      return null;\n    }\n  }\n\n\n  async AddKnownPlace(place){\n    try {\n      const userDocRef = doc(this.firestore, \"Riders\",  `${this.auth.currentUser.uid}/KnownPlaces/${place.full}`)\n      await setDoc(userDocRef, {\n        place,\n      });\n      return true;\n    } catch (e) {\n      alert(e)\n      return null;\n    }\n  }\n\n\n\n\n  ///update driver information\n  async CreateandUpdateDriver(coord, ID){\n    try{\n   \n    const loc: Drivers = {\n      geohash: geohashForLocation([coord.coords.latitude, coord.coords.longitude]),\n      Driver_lat: coord.coords.latitude,\n      Driver_lng: coord.coords.longitude,\n      Driver_id: ID,\n      Driver_name: 'james',\n      Driver_car: 'Nissan',\n      Driver_imgUrl: '',\n      Driver_rating: 0,\n      distance: 0,\n      duration: 0,\n      seats: 1,\n      start: false,\n      stop: false,\n      intransit: false,\n      cancel: false,\n      Driver_cartype: '',\n      Driver_plate: '',\n      time: ''\n    };\n    await setDoc(doc(this.firestore, \"Drivers\",  ID), { ...loc});\n  }catch(e){\n    throw new Error(e);\n    \n  }\n   \n    console.log('done')\n  }\n\n\n\n  ///create a new driver and publish info to database\n  async CreateNewDriver(coord){\n    try{\n    const loc: Drivers = {\n      geohash: geohashForLocation([coord.coords.latitude, coord.coords.longitude]),\n      Driver_lat: coord.coords.latitude,\n      Driver_lng: coord.coords.longitude,\n      Driver_id: 'Driver ' + Math.random(),\n      Driver_name: 'james',\n      Driver_car: 'Nissan',\n      Driver_imgUrl: '',\n      Driver_rating: 0,\n      distance: 0,\n      duration: 0,\n      seats: 1,\n      start: false,\n      stop: false,\n      intransit: false,\n      cancel: false,\n      Driver_cartype: '',\n      Driver_plate: '',\n      time: ''\n    };\n    await setDoc(doc(this.firestore, \"Drivers\",  'Driver '+ Math.random()), { ...loc});\n  }catch(e){\n    throw new Error(e);\n  }\n  }\n\n  //geoquery, sort drivers within a specified radius and seperate them from the others\n  async checkDriversWithin(center, radiusInM){\n    try{\n    const userDocRef = collection(this.firestore, `Drivers`);\n// Each item in 'bounds' represents a startAt/endAt pair. We have to issue\n// a separate query for each pair. There can be up to 9 pairs of bounds\n// depending on overlap, but in most cases there are 4.\nconst bounds = geohashQueryBounds(center, radiusInM);\nconst promises = [];\nfor (const b of bounds) {\n  const q = query(userDocRef, orderBy(\"geohash\"), startAt(b[0]), endAt(b[1]));\n  this.directory = q;\n  const documentSnapshots = await getDocs(q);\n  documentSnapshots.docChanges().forEach((doc) => {\n    // alert(JSON.stringify(doc.doc));\n    // doc.data() is never undefined for query doc snapshots\n    console.log(doc.doc, \" => \", doc.doc.data());\n    promises.push(doc.doc.data());\n  })\n \n}\n\n\n\n// Collect all the query results together into a single list\nconst j = await Promise.all(promises).then((snapshots) => {\n  const matchingDocs = [];\n  for (const snap of snapshots) {\n     \n      const lat = snap.Driver_lat;\n      const lng = snap.Driver_lng;\n      // We have to filter out a few false positives due to GeoHash\n      // accuracy, but most will match\n      const distanceInKm = distanceBetween([lat, lng], center);\n      \n    \n      const distanceInM = distanceInKm * 1000;\n\n      console.log(snap);\n      snap.distance = distanceInM;\n      snap.duration = this.time_convert(distanceInM)\n\n      console.log(distanceInM, radiusInM);\n      if (distanceInM <= radiusInM) {\n        matchingDocs.push(snap);\n      }\n      \n  }\n\n  return matchingDocs;\n})\n\n   if (j)\n   return j\n\n    }catch(e){\n      throw new Error(e);\n    }\n\n  }\n\n\n   time_convert(num)\n  { \n   var minutes = Math.floor(num / 60);  \n   return minutes       \n  }\n\n     getDriver() {\n      return collectionData(this.driverCollection, {\n        idField: 'id',\n      }) as Observable<Drivers[]>;\n     }\n\n\n    update(pokemon: Drivers) {\n      const pokemonDocumentReference = doc(\n        this.firestore,\n        `pokemon/${pokemon.Driver_id}`\n      );\n      return updateDoc(pokemonDocumentReference, { ...pokemon });\n    }\n  \n\n  async uploadImage(cameraFile: Photo, uid) {\n   \n    const storageRef = ref(this.storage, this.pathM);\n\n    try {\n      await uploadString(storageRef, cameraFile.base64String, 'base64');\n\n      const imageUrl = await getDownloadURL(storageRef);\n\n      const userDocRef = doc(this.firestore, `Riders/${uid}`);\n      await setDoc(userDocRef, {\n        imageUrl,\n      });\n      return true;\n    } catch (e) {\n      return null;\n    }\n  }\n \n\n  async createUser(name, email, img, phone, uid) {\n    try {\n      const loc: Rider = {\n        Loc_lat: 0,\n        Loc_lng: 0,\n        Rider_id: uid,\n        Rider_name: name,\n        Rider_phone: phone,\n        Rider_imgUrl: img,\n        Rider_rating: 0,\n        Des_lat: 0,\n        Des_lng: 0,\n        Rider_Location: '',\n        Rider_Destination: '',\n        Rider_email: email,\n        countDown: 0,\n        cancel: false,\n        price: 0,\n        cash: true\n      };\n      await setDoc(doc(this.firestore, \"Riders\",  uid), { ...loc});\n      return true;\n    } catch (e) {\n      return null;\n    }\n  }\n\n\n   getMessage() {\n    const userDocRef = collection(this.firestore, `Messages/${this.auth.currentUser.uid}/messages`);\n    return collectionData(userDocRef);\n  }\n\n  getCards() {\n    const userDocRef = collection(this.firestore, `Riders/${this.auth.currentUser.uid}/Cards`);\n    return collectionData(userDocRef);\n  }\n\n  getKnownPlaces() {\n    const userDocRef = collection(this.firestore, `Riders/${this.auth.currentUser.uid}/KnownPlaces`);\n   \n    return collectionData(userDocRef);\n  }\n\n  getDrivers() {\n    const userDocRef = collection(this.firestore, `Drivers`);\n    return collectionData(userDocRef);\n  }\n\nasync addChatMessage(msg) {\n  return await addDoc(collection(this.firestore, `Messages/${this.profile.Rider_id}/messages`), {\n    msg: msg,\n    from: this.auth.currentUser.uid,\n    createdAt: serverTimestamp(),\n    myMsg: true,\n    fromName: this.profile.Rider_name\n  });\n}\n\n\nasync createCard(name, number, type, id) {\n  try {\n    const loc: Card = {\n      name: name,\n      number: number,\n      type: type,\n      id: id,\n      selected: true\n    };\n    await setDoc(doc(this.firestore, \"Riders\",  `${this.profile.Rider_id}/Cards/${name}`), { ...loc});\n    return true;\n  } catch (e) {\n    alert(e)\n    return null;\n  }\n\n  \n}\n\n\n\nasync updateDriverOnlineState(ID) {\n  try {\n    const userDocRef = doc(this.firestore, 'Drivers', ID)\n    await updateDoc(userDocRef, {\n      onlineState: true,\n    });\n    return true;\n  } catch (e) {\n    alert(e)\n    return null;\n  }\n}\n\n\nasync updateCArd(name, number, type, id, state) {\n  try {\n    const loc: Card = {\n      name: name,\n      number: number,\n      type: type,\n      id: id,\n      selected: state\n    };\n    await updateDoc(doc(this.firestore, \"Riders\",  `${this.profile.Rider_id}/Cards/${name}`), { ...loc});\n    return true;\n  } catch (e) {\n    alert(e)\n    return null;\n  }\n\n}\n\n\n}"]},"metadata":{},"sourceType":"module"}