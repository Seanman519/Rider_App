{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = exports.defaultAxiosInstance = exports.X_GOOG_MAPS_EXPERIENCE_ID = exports.acceptEncoding = exports.userAgent = exports.defaultTimeout = exports.defaultHttpsAgent = exports.version = void 0;\n\nconst rax = require(\"retry-axios\");\n\nconst directions_1 = require(\"./directions\");\n\nconst distance_1 = require(\"./distance\");\n\nconst elevation_1 = require(\"./elevation\");\n\nconst findplacefromtext_1 = require(\"./places/findplacefromtext\");\n\nconst geocode_1 = require(\"./geocode/geocode\");\n\nconst geolocate_1 = require(\"./geolocate\");\n\nconst nearestroads_1 = require(\"./roads/nearestroads\");\n\nconst autocomplete_1 = require(\"./places/autocomplete\");\n\nconst details_1 = require(\"./places/details\");\n\nconst photo_1 = require(\"./places/photo\");\n\nconst queryautocomplete_1 = require(\"./places/queryautocomplete\");\n\nconst placesnearby_1 = require(\"./places/placesnearby\");\n\nconst reversegeocode_1 = require(\"./geocode/reversegeocode\");\n\nconst snaptoroads_1 = require(\"./roads/snaptoroads\");\n\nconst textsearch_1 = require(\"./places/textsearch\");\n\nconst timezone_1 = require(\"./timezone\");\n\nconst axios_1 = require(\"axios\");\n\nconst agentkeepalive_1 = require(\"agentkeepalive\");\n\nconst adapter_1 = require(\"./adapter\"); // Cannot be `import` as it's not under TS root dir\n\n\nexports.version = require(\"../package.json\").version;\nexports.defaultHttpsAgent = new agentkeepalive_1.HttpsAgent({\n  keepAlive: true\n});\nexports.defaultTimeout = 10000;\nexports.userAgent = `google-maps-services-node-${exports.version}`;\nexports.acceptEncoding = \"gzip\";\nexports.X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\nconst defaultConfig = {\n  timeout: exports.defaultTimeout,\n  httpsAgent: exports.defaultHttpsAgent,\n  adapter: adapter_1.customAdapter,\n  headers: {\n    \"User-Agent\": exports.userAgent,\n    \"Accept-Encoding\": exports.acceptEncoding\n  }\n};\nexports.defaultAxiosInstance = axios_1.default.create(defaultConfig);\nrax.attach(exports.defaultAxiosInstance);\n/**\n * Client is a light wrapper around API methods providing shared configuration for Axios\n * settings such as retry logic using the default retry-axios settings and gzip encoding.\n *\n * ### Instantiate with defaults\n * ```\n * const client = Client()\n * ```\n *\n * ### Instantiate with config\n * ```\n * const client = Client({config})\n * ```\n *\n * ### Instantiate with axiosInstance **Advanced**\n * ```\n * const axiosInstance = axios.create(config)\n * const client = Client({axiosInstance})\n * ```\n */\n\nclass Client {\n  constructor({\n    axiosInstance,\n    config,\n    experienceId\n  } = {}) {\n    if (axiosInstance && config) {\n      throw new Error(\"Provide one of axiosInstance or config.\");\n    }\n\n    if (axiosInstance) {\n      this.axiosInstance = axiosInstance;\n      this.axiosInstance.defaults.headers = Object.assign(Object.assign({}, defaultConfig.headers), this.axiosInstance.defaults.headers);\n    } else if (config) {\n      config = Object.assign(Object.assign({}, defaultConfig), config);\n      config.headers = Object.assign(Object.assign({}, defaultConfig.headers), config.headers || {});\n      this.axiosInstance = axios_1.default.create(config);\n      rax.attach(this.axiosInstance);\n    } else {\n      this.axiosInstance = exports.defaultAxiosInstance;\n    }\n\n    if (experienceId) {\n      this.setExperienceId(...experienceId);\n    }\n  }\n\n  setExperienceId(...ids) {\n    this.experienceId = ids;\n    this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\",\");\n  }\n\n  clearExperienceId() {\n    this.experienceId = null;\n    this.clearExperienceIdHeader();\n  }\n\n  clearExperienceIdHeader() {\n    delete this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID];\n  }\n\n  getExperienceId() {\n    return this.experienceId;\n  }\n\n  directions(request) {\n    return (0, directions_1.directions)(request, this.axiosInstance);\n  }\n\n  distancematrix(request) {\n    return (0, distance_1.distancematrix)(request, this.axiosInstance);\n  }\n\n  elevation(request) {\n    return (0, elevation_1.elevation)(request, this.axiosInstance);\n  }\n\n  timezone(request) {\n    return (0, timezone_1.timezone)(request, this.axiosInstance);\n  }\n\n  geolocate(request) {\n    return (0, geolocate_1.geolocate)(request, this.axiosInstance);\n  }\n  /**\n   * An example use of this function.\n   *\n   * ```javascript\n   * import { Client } from '@googlemaps/google-maps-services-js';\n   *\n   * const args = {\n   *   params: {\n   *     key: '<your-api-key>',\n   *     address: 'Perth 4WD & Commercial Centre',\n   *   }\n   * };\n   * const client = new Client();\n   * client.geocode(args).then(gcResponse => {\n   *   const str = JSON.stringify(gcResponse.data.results[0]);\n   *   console.log(`First result is: ${str}`);)\n   * });\n   * ```\n   */\n\n\n  geocode(request) {\n    return (0, geocode_1.geocode)(request, this.axiosInstance);\n  }\n\n  reverseGeocode(request) {\n    return (0, reversegeocode_1.reverseGeocode)(request, this.axiosInstance);\n  }\n\n  placeAutocomplete(request) {\n    return (0, autocomplete_1.placeAutocomplete)(request, this.axiosInstance);\n  }\n\n  placeDetails(request) {\n    return (0, details_1.placeDetails)(request, this.axiosInstance);\n  }\n\n  findPlaceFromText(request) {\n    return (0, findplacefromtext_1.findPlaceFromText)(request, this.axiosInstance);\n  }\n\n  placePhoto(request) {\n    return (0, photo_1.placePhoto)(request, this.axiosInstance);\n  }\n\n  placesNearby(request) {\n    return (0, placesnearby_1.placesNearby)(request, this.axiosInstance);\n  }\n\n  placeQueryAutocomplete(request) {\n    return (0, queryautocomplete_1.placeQueryAutocomplete)(request, this.axiosInstance);\n  }\n\n  textSearch(request) {\n    return (0, textsearch_1.textSearch)(request, this.axiosInstance);\n  }\n\n  nearestRoads(request) {\n    return (0, nearestroads_1.nearestRoads)(request, this.axiosInstance);\n  }\n\n  snapToRoads(request) {\n    return (0, snaptoroads_1.snapToRoads)(request, this.axiosInstance);\n  }\n\n}\n\nexports.Client = Client;","map":{"version":3,"names":["Object","defineProperty","exports","value","Client","defaultAxiosInstance","X_GOOG_MAPS_EXPERIENCE_ID","acceptEncoding","userAgent","defaultTimeout","defaultHttpsAgent","version","rax","require","directions_1","distance_1","elevation_1","findplacefromtext_1","geocode_1","geolocate_1","nearestroads_1","autocomplete_1","details_1","photo_1","queryautocomplete_1","placesnearby_1","reversegeocode_1","snaptoroads_1","textsearch_1","timezone_1","axios_1","agentkeepalive_1","adapter_1","HttpsAgent","keepAlive","defaultConfig","timeout","httpsAgent","adapter","customAdapter","headers","default","create","attach","constructor","axiosInstance","config","experienceId","Error","defaults","assign","setExperienceId","ids","join","clearExperienceId","clearExperienceIdHeader","getExperienceId","directions","request","distancematrix","elevation","timezone","geolocate","geocode","reverseGeocode","placeAutocomplete","placeDetails","findPlaceFromText","placePhoto","placesNearby","placeQueryAutocomplete","textSearch","nearestRoads","snapToRoads"],"sources":["/Users/chineduetoh/Desktop/IONIC PROJECTS/Go_Rider/node_modules/@googlemaps/google-maps-services-js/dist/client.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = exports.defaultAxiosInstance = exports.X_GOOG_MAPS_EXPERIENCE_ID = exports.acceptEncoding = exports.userAgent = exports.defaultTimeout = exports.defaultHttpsAgent = exports.version = void 0;\nconst rax = require(\"retry-axios\");\nconst directions_1 = require(\"./directions\");\nconst distance_1 = require(\"./distance\");\nconst elevation_1 = require(\"./elevation\");\nconst findplacefromtext_1 = require(\"./places/findplacefromtext\");\nconst geocode_1 = require(\"./geocode/geocode\");\nconst geolocate_1 = require(\"./geolocate\");\nconst nearestroads_1 = require(\"./roads/nearestroads\");\nconst autocomplete_1 = require(\"./places/autocomplete\");\nconst details_1 = require(\"./places/details\");\nconst photo_1 = require(\"./places/photo\");\nconst queryautocomplete_1 = require(\"./places/queryautocomplete\");\nconst placesnearby_1 = require(\"./places/placesnearby\");\nconst reversegeocode_1 = require(\"./geocode/reversegeocode\");\nconst snaptoroads_1 = require(\"./roads/snaptoroads\");\nconst textsearch_1 = require(\"./places/textsearch\");\nconst timezone_1 = require(\"./timezone\");\nconst axios_1 = require(\"axios\");\nconst agentkeepalive_1 = require(\"agentkeepalive\");\nconst adapter_1 = require(\"./adapter\");\n// Cannot be `import` as it's not under TS root dir\nexports.version = require(\"../package.json\").version;\nexports.defaultHttpsAgent = new agentkeepalive_1.HttpsAgent({ keepAlive: true });\nexports.defaultTimeout = 10000;\nexports.userAgent = `google-maps-services-node-${exports.version}`;\nexports.acceptEncoding = \"gzip\";\nexports.X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\nconst defaultConfig = {\n    timeout: exports.defaultTimeout,\n    httpsAgent: exports.defaultHttpsAgent,\n    adapter: adapter_1.customAdapter,\n    headers: {\n        \"User-Agent\": exports.userAgent,\n        \"Accept-Encoding\": exports.acceptEncoding,\n    },\n};\nexports.defaultAxiosInstance = axios_1.default.create(defaultConfig);\nrax.attach(exports.defaultAxiosInstance);\n/**\n * Client is a light wrapper around API methods providing shared configuration for Axios\n * settings such as retry logic using the default retry-axios settings and gzip encoding.\n *\n * ### Instantiate with defaults\n * ```\n * const client = Client()\n * ```\n *\n * ### Instantiate with config\n * ```\n * const client = Client({config})\n * ```\n *\n * ### Instantiate with axiosInstance **Advanced**\n * ```\n * const axiosInstance = axios.create(config)\n * const client = Client({axiosInstance})\n * ```\n */\nclass Client {\n    constructor({ axiosInstance, config, experienceId } = {}) {\n        if (axiosInstance && config) {\n            throw new Error(\"Provide one of axiosInstance or config.\");\n        }\n        if (axiosInstance) {\n            this.axiosInstance = axiosInstance;\n            this.axiosInstance.defaults.headers = Object.assign(Object.assign({}, defaultConfig.headers), this.axiosInstance.defaults.headers);\n        }\n        else if (config) {\n            config = Object.assign(Object.assign({}, defaultConfig), config);\n            config.headers = Object.assign(Object.assign({}, defaultConfig.headers), (config.headers || {}));\n            this.axiosInstance = axios_1.default.create(config);\n            rax.attach(this.axiosInstance);\n        }\n        else {\n            this.axiosInstance = exports.defaultAxiosInstance;\n        }\n        if (experienceId) {\n            this.setExperienceId(...experienceId);\n        }\n    }\n    setExperienceId(...ids) {\n        this.experienceId = ids;\n        this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\",\");\n    }\n    clearExperienceId() {\n        this.experienceId = null;\n        this.clearExperienceIdHeader();\n    }\n    clearExperienceIdHeader() {\n        delete this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID];\n    }\n    getExperienceId() {\n        return this.experienceId;\n    }\n    directions(request) {\n        return (0, directions_1.directions)(request, this.axiosInstance);\n    }\n    distancematrix(request) {\n        return (0, distance_1.distancematrix)(request, this.axiosInstance);\n    }\n    elevation(request) {\n        return (0, elevation_1.elevation)(request, this.axiosInstance);\n    }\n    timezone(request) {\n        return (0, timezone_1.timezone)(request, this.axiosInstance);\n    }\n    geolocate(request) {\n        return (0, geolocate_1.geolocate)(request, this.axiosInstance);\n    }\n    /**\n     * An example use of this function.\n     *\n     * ```javascript\n     * import { Client } from '@googlemaps/google-maps-services-js';\n     *\n     * const args = {\n     *   params: {\n     *     key: '<your-api-key>',\n     *     address: 'Perth 4WD & Commercial Centre',\n     *   }\n     * };\n     * const client = new Client();\n     * client.geocode(args).then(gcResponse => {\n     *   const str = JSON.stringify(gcResponse.data.results[0]);\n     *   console.log(`First result is: ${str}`);)\n     * });\n     * ```\n     */\n    geocode(request) {\n        return (0, geocode_1.geocode)(request, this.axiosInstance);\n    }\n    reverseGeocode(request) {\n        return (0, reversegeocode_1.reverseGeocode)(request, this.axiosInstance);\n    }\n    placeAutocomplete(request) {\n        return (0, autocomplete_1.placeAutocomplete)(request, this.axiosInstance);\n    }\n    placeDetails(request) {\n        return (0, details_1.placeDetails)(request, this.axiosInstance);\n    }\n    findPlaceFromText(request) {\n        return (0, findplacefromtext_1.findPlaceFromText)(request, this.axiosInstance);\n    }\n    placePhoto(request) {\n        return (0, photo_1.placePhoto)(request, this.axiosInstance);\n    }\n    placesNearby(request) {\n        return (0, placesnearby_1.placesNearby)(request, this.axiosInstance);\n    }\n    placeQueryAutocomplete(request) {\n        return (0, queryautocomplete_1.placeQueryAutocomplete)(request, this.axiosInstance);\n    }\n    textSearch(request) {\n        return (0, textsearch_1.textSearch)(request, this.axiosInstance);\n    }\n    nearestRoads(request) {\n        return (0, nearestroads_1.nearestRoads)(request, this.axiosInstance);\n    }\n    snapToRoads(request) {\n        return (0, snaptoroads_1.snapToRoads)(request, this.axiosInstance);\n    }\n}\nexports.Client = Client;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,oBAAR,GAA+BH,OAAO,CAACI,yBAAR,GAAoCJ,OAAO,CAACK,cAAR,GAAyBL,OAAO,CAACM,SAAR,GAAoBN,OAAO,CAACO,cAAR,GAAyBP,OAAO,CAACQ,iBAAR,GAA4BR,OAAO,CAACS,OAAR,GAAkB,KAAK,CAA7M;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAnB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,mBAAmB,GAAGJ,OAAO,CAAC,4BAAD,CAAnC;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,mBAAD,CAAzB;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMO,cAAc,GAAGP,OAAO,CAAC,sBAAD,CAA9B;;AACA,MAAMQ,cAAc,GAAGR,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMS,SAAS,GAAGT,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMU,OAAO,GAAGV,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMW,mBAAmB,GAAGX,OAAO,CAAC,4BAAD,CAAnC;;AACA,MAAMY,cAAc,GAAGZ,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMa,gBAAgB,GAAGb,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMc,aAAa,GAAGd,OAAO,CAAC,qBAAD,CAA7B;;AACA,MAAMe,YAAY,GAAGf,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAMgB,UAAU,GAAGhB,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMiB,OAAO,GAAGjB,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMkB,gBAAgB,GAAGlB,OAAO,CAAC,gBAAD,CAAhC;;AACA,MAAMmB,SAAS,GAAGnB,OAAO,CAAC,WAAD,CAAzB,C,CACA;;;AACAX,OAAO,CAACS,OAAR,GAAkBE,OAAO,CAAC,iBAAD,CAAP,CAA2BF,OAA7C;AACAT,OAAO,CAACQ,iBAAR,GAA4B,IAAIqB,gBAAgB,CAACE,UAArB,CAAgC;EAAEC,SAAS,EAAE;AAAb,CAAhC,CAA5B;AACAhC,OAAO,CAACO,cAAR,GAAyB,KAAzB;AACAP,OAAO,CAACM,SAAR,GAAqB,6BAA4BN,OAAO,CAACS,OAAQ,EAAjE;AACAT,OAAO,CAACK,cAAR,GAAyB,MAAzB;AACAL,OAAO,CAACI,yBAAR,GAAoC,2BAApC;AACA,MAAM6B,aAAa,GAAG;EAClBC,OAAO,EAAElC,OAAO,CAACO,cADC;EAElB4B,UAAU,EAAEnC,OAAO,CAACQ,iBAFF;EAGlB4B,OAAO,EAAEN,SAAS,CAACO,aAHD;EAIlBC,OAAO,EAAE;IACL,cAActC,OAAO,CAACM,SADjB;IAEL,mBAAmBN,OAAO,CAACK;EAFtB;AAJS,CAAtB;AASAL,OAAO,CAACG,oBAAR,GAA+ByB,OAAO,CAACW,OAAR,CAAgBC,MAAhB,CAAuBP,aAAvB,CAA/B;AACAvB,GAAG,CAAC+B,MAAJ,CAAWzC,OAAO,CAACG,oBAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,MAAN,CAAa;EACTwC,WAAW,CAAC;IAAEC,aAAF;IAAiBC,MAAjB;IAAyBC;EAAzB,IAA0C,EAA3C,EAA+C;IACtD,IAAIF,aAAa,IAAIC,MAArB,EAA6B;MACzB,MAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;IACH;;IACD,IAAIH,aAAJ,EAAmB;MACf,KAAKA,aAAL,GAAqBA,aAArB;MACA,KAAKA,aAAL,CAAmBI,QAAnB,CAA4BT,OAA5B,GAAsCxC,MAAM,CAACkD,MAAP,CAAclD,MAAM,CAACkD,MAAP,CAAc,EAAd,EAAkBf,aAAa,CAACK,OAAhC,CAAd,EAAwD,KAAKK,aAAL,CAAmBI,QAAnB,CAA4BT,OAApF,CAAtC;IACH,CAHD,MAIK,IAAIM,MAAJ,EAAY;MACbA,MAAM,GAAG9C,MAAM,CAACkD,MAAP,CAAclD,MAAM,CAACkD,MAAP,CAAc,EAAd,EAAkBf,aAAlB,CAAd,EAAgDW,MAAhD,CAAT;MACAA,MAAM,CAACN,OAAP,GAAiBxC,MAAM,CAACkD,MAAP,CAAclD,MAAM,CAACkD,MAAP,CAAc,EAAd,EAAkBf,aAAa,CAACK,OAAhC,CAAd,EAAyDM,MAAM,CAACN,OAAP,IAAkB,EAA3E,CAAjB;MACA,KAAKK,aAAL,GAAqBf,OAAO,CAACW,OAAR,CAAgBC,MAAhB,CAAuBI,MAAvB,CAArB;MACAlC,GAAG,CAAC+B,MAAJ,CAAW,KAAKE,aAAhB;IACH,CALI,MAMA;MACD,KAAKA,aAAL,GAAqB3C,OAAO,CAACG,oBAA7B;IACH;;IACD,IAAI0C,YAAJ,EAAkB;MACd,KAAKI,eAAL,CAAqB,GAAGJ,YAAxB;IACH;EACJ;;EACDI,eAAe,CAAC,GAAGC,GAAJ,EAAS;IACpB,KAAKL,YAAL,GAAoBK,GAApB;IACA,KAAKP,aAAL,CAAmBI,QAAnB,CAA4BT,OAA5B,CAAoCtC,OAAO,CAACI,yBAA5C,IAAyE8C,GAAG,CAACC,IAAJ,CAAS,GAAT,CAAzE;EACH;;EACDC,iBAAiB,GAAG;IAChB,KAAKP,YAAL,GAAoB,IAApB;IACA,KAAKQ,uBAAL;EACH;;EACDA,uBAAuB,GAAG;IACtB,OAAO,KAAKV,aAAL,CAAmBI,QAAnB,CAA4BT,OAA5B,CAAoCtC,OAAO,CAACI,yBAA5C,CAAP;EACH;;EACDkD,eAAe,GAAG;IACd,OAAO,KAAKT,YAAZ;EACH;;EACDU,UAAU,CAACC,OAAD,EAAU;IAChB,OAAO,CAAC,GAAG5C,YAAY,CAAC2C,UAAjB,EAA6BC,OAA7B,EAAsC,KAAKb,aAA3C,CAAP;EACH;;EACDc,cAAc,CAACD,OAAD,EAAU;IACpB,OAAO,CAAC,GAAG3C,UAAU,CAAC4C,cAAf,EAA+BD,OAA/B,EAAwC,KAAKb,aAA7C,CAAP;EACH;;EACDe,SAAS,CAACF,OAAD,EAAU;IACf,OAAO,CAAC,GAAG1C,WAAW,CAAC4C,SAAhB,EAA2BF,OAA3B,EAAoC,KAAKb,aAAzC,CAAP;EACH;;EACDgB,QAAQ,CAACH,OAAD,EAAU;IACd,OAAO,CAAC,GAAG7B,UAAU,CAACgC,QAAf,EAAyBH,OAAzB,EAAkC,KAAKb,aAAvC,CAAP;EACH;;EACDiB,SAAS,CAACJ,OAAD,EAAU;IACf,OAAO,CAAC,GAAGvC,WAAW,CAAC2C,SAAhB,EAA2BJ,OAA3B,EAAoC,KAAKb,aAAzC,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIkB,OAAO,CAACL,OAAD,EAAU;IACb,OAAO,CAAC,GAAGxC,SAAS,CAAC6C,OAAd,EAAuBL,OAAvB,EAAgC,KAAKb,aAArC,CAAP;EACH;;EACDmB,cAAc,CAACN,OAAD,EAAU;IACpB,OAAO,CAAC,GAAGhC,gBAAgB,CAACsC,cAArB,EAAqCN,OAArC,EAA8C,KAAKb,aAAnD,CAAP;EACH;;EACDoB,iBAAiB,CAACP,OAAD,EAAU;IACvB,OAAO,CAAC,GAAGrC,cAAc,CAAC4C,iBAAnB,EAAsCP,OAAtC,EAA+C,KAAKb,aAApD,CAAP;EACH;;EACDqB,YAAY,CAACR,OAAD,EAAU;IAClB,OAAO,CAAC,GAAGpC,SAAS,CAAC4C,YAAd,EAA4BR,OAA5B,EAAqC,KAAKb,aAA1C,CAAP;EACH;;EACDsB,iBAAiB,CAACT,OAAD,EAAU;IACvB,OAAO,CAAC,GAAGzC,mBAAmB,CAACkD,iBAAxB,EAA2CT,OAA3C,EAAoD,KAAKb,aAAzD,CAAP;EACH;;EACDuB,UAAU,CAACV,OAAD,EAAU;IAChB,OAAO,CAAC,GAAGnC,OAAO,CAAC6C,UAAZ,EAAwBV,OAAxB,EAAiC,KAAKb,aAAtC,CAAP;EACH;;EACDwB,YAAY,CAACX,OAAD,EAAU;IAClB,OAAO,CAAC,GAAGjC,cAAc,CAAC4C,YAAnB,EAAiCX,OAAjC,EAA0C,KAAKb,aAA/C,CAAP;EACH;;EACDyB,sBAAsB,CAACZ,OAAD,EAAU;IAC5B,OAAO,CAAC,GAAGlC,mBAAmB,CAAC8C,sBAAxB,EAAgDZ,OAAhD,EAAyD,KAAKb,aAA9D,CAAP;EACH;;EACD0B,UAAU,CAACb,OAAD,EAAU;IAChB,OAAO,CAAC,GAAG9B,YAAY,CAAC2C,UAAjB,EAA6Bb,OAA7B,EAAsC,KAAKb,aAA3C,CAAP;EACH;;EACD2B,YAAY,CAACd,OAAD,EAAU;IAClB,OAAO,CAAC,GAAGtC,cAAc,CAACoD,YAAnB,EAAiCd,OAAjC,EAA0C,KAAKb,aAA/C,CAAP;EACH;;EACD4B,WAAW,CAACf,OAAD,EAAU;IACjB,OAAO,CAAC,GAAG/B,aAAa,CAAC8C,WAAlB,EAA+Bf,OAA/B,EAAwC,KAAKb,aAA7C,CAAP;EACH;;AAtGQ;;AAwGb3C,OAAO,CAACE,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"script"}